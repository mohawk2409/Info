
#include "voitures.h"

/* déclaration des fonctions définies */
void  initialiser(Route &r, size_t taille, int vmax);
void accelerer(Route &r), freiner(Route &r), ralentir(Route &r), deplacer(Route &r);
void ajouter(Route &r, int position), supprimer(Route &r, char Id);
void simuler(Route &r, int n);
void afficherR(Route const &r), afficherV(Route const &r, char Id);
int saVitesse(Route const &r, char Id);
bool aRalenti(Route const &r, char Id);
void setPV(Route &r, double newPV), setVMax(Route &r, int newVMax);

int dispo(Route r){ //récup l'id de la dernière voiture
    int maxvoiture = 0, code;
    code = r.voitures.at(-1).identification;
    if(code == 90){
        return 97;
    }
    else{
        return code+1;
    }
}

// Les fonctions que vous écrivez peuvent prevoir d'afficher des messages de
// debug quand cette variable globale vaut true
bool debug = true;


void initialiser(Route &r, size_t taille, int vmax) {
  r.occupe = vector<int> (taille);
  r.vmax = vmax;
  r.pv = 0;
}


/* ajouter une voiture a partir de la premiere position libre a partir
 * d'une position donnee
 * Pour nommer la voiture il faut connaitre la prochaine lettre a utiliser
 * et mémoriser que cette lettre ne sera donc plus utilisable (il peut
 * etre interessant de prevoir une fonction auxiliaire pour cela)
 */
void ajouter(Route &r, int pos) {
    int position = 0; //garde la valeur de i
    for(size_t i = pos; i < r.occupe.size(); i=i+1){
        if(r.occupe.at(i) == 0){
            position = i;
            break;
        }
        else{
            continue;
        }
    }
    
    r.occupe.at(position) = 1; // dis que la position est occupée par la voiture
    r.voitures.resize(r.voitures.size() + 1); // On ajoute une voiture dans le tableau
    r.voitures.at(r.voitures.size()-1).identification = char(dispo(r)); // donne à la voiture la prochaine lettre avec dispo
    r.voitures.at(r.voitures.size()-1).vitesse = 0;  // la vitesse de la voiture est nulle
    r.voitures.at(r.voitures.size()-1).position = position; // donne la position de la voiture
}


void accelerer(Route &r) {
  // a faire
}


void afficherR(Route const &r) {
  int i, MAX;

  // A FAIRE: initialiser MAX avec le nombre de cellules de votre route
  MAX = r.occupe.size();

  string buf(MAX, '.'); // initilaise buf avec des points

  // ecriture d'une ligne d'en-tete. On modifie buf a certains endroits
  // pour mettre des + ou des |, puis on affiche buf.
  for(i=9; i < MAX; i += 10) { buf.at(i) = '|'; }
  for(i=4; i < MAX; i += 10) { buf.at(i) = '+'; }
  cout << buf << endl;

  for(i=0; i < MAX; i++) {
    // A FAIRE
    // completez ici pour mettre dans buf.at(i) soit l'identificateur
    // de la voiture qui occupe la cellule, soit le caractere ' '
    if(r.occupe.at(i) == 0){ //Si case n'est pas occupé, on met un espace
      buf.at(i) = ' ';
    }
    else{
      for(int j=0 ; i<MAX ; j++){ //Test toutes les voitures pour savoir laquelle correspond à la case occupée
        if(r.voitures.at(j).position == i){
          buf.at(i) = r.voitures.at(j).identification; //On met le nom de la voiture qui occupe la case
          break;
        }
      }
    }
  }
  cout << buf << endl;
}


void freiner(Route &r) {
  // A FAIRE
}


void ralentir(Route &r) {
  // A FAIRE ULTERIEUREMENT
  // pour l'instant pv vaut tjrs 0 donc il n'y a pas de ralentissement
  // aleatoire.
}


void deplacer(Route &r) {
  // A faire
}




/* fonction auxiliaire optionnelle : renvoie l'indice de la voiture nommée Id
 * dans le vecteur des voitures de r
 */
size_t voiture(Route const &r, char Id) {
  size_t res = 314; // valeur arbitraire
  // A FAIRE si vous avez besoin d'une telle fonction
  return res;
}


void afficherV(Route const &r, char Id) {
  // A FAIRE
}

/* fournie gracieusement */
void simuler(Route &r, int n) {
  for(int i = 0; i < n; i++) {
    accelerer(r);
    freiner(r);
    ralentir(r);
    deplacer(r);
  }
}

int saVitesse (Route const &r, char Id) {
  int res = -1; // valeur arbitraire
  // A FAIRE
  return res;
}


bool aRalenti(Route const &r, char Id) {
  bool res = false ; // valeur arbitraire
  // A FAIRE
  return res;
}

void setPV(Route &r, double newPV) {
  // A FAIRE
}

void setVMax(Route &r, int newVMax) {
  // A FAIRE
}

/* supprimer la voiture de nom donne, si elle existe, sinon ne fait rien */
void supprimer(Route &r, char Id) {
  // A FAIRE
}



/* Quelques fonctions de test mises a disposition et la fonction main()
 * Pour réaliser les tests du fichier voitures.txt mis a dispostion, les
 * fonctions accelerer et freiner ont été modifiées pour afficher un message
 * a chaque acceleration ou freinage
 *
 * Bien sur, tant que vous n'avez rien modifié les tests sont decevants mais
 * au moins le fichier compile.
 */

void test1() {
  Route r;
  cout << "\nLancement de test1\n";
  initialiser(r, 50, 3);
  ajouter(r, 0); ajouter(r, 29); ajouter(r, 44);
  afficherR(r);
  /* a la premiere etape, l'avance sera de 1 unite, de 2 a la deuxieme et
   * de 3 a toutes les suivantes puisqu'il n'y a pas de probleme de distance
   * de securite.
   */
  simuler(r, 1);  afficherR(r);
  simuler(r, 1);  afficherR(r);
  simuler(r, 1);  afficherR(r);
  simuler(r, 15);
  afficherR(r);
  /*
  // Apres 18 unites de temps, chaque voiture doit avoir avancer de
  // 1 + 2 + 3 + 15*3 = 51 unites. A l'arrivee les voitures doivent donc
  // etre UNE position a droite de leur position de depart, avec une vitesse
  // maximale.
  */
  cout << "Fin de test1\n";
}

void test1Bis() {
  Route r;
  cout << "\n\nLancement de test1Bis\n";
  // On cree une route plus petite
  initialiser(r, 10, 3);
  afficherR(r);
  cout << "Ajout des voitures \n";
  ajouter(r, 7); ajouter(r, 0);
  afficherR(r);
  // avancerait normalement d'une cellule, puis deux, puis trois, puis trois
  // mais il n'y a que deux cases d'ecart entre les deux voitures.
  // A la troisieme acceleration la voiture A atteint une vitesse de 3 a la
  // 1ere etape mais doit freiner a cause de la distance de securite (deux
  // cellules libres avant B). Donc après cette étape A a avance de deux
  // cellules et B de 3.
  simuler(r, 3);
  afficherR(r);
  simuler(r, 12);
  // B s'est eloignee et a sa vitesse maximale. A peut accelerer une fois avant
  // d'atteindre sa vitesse maximale. Apres cela il n'y a plus ni acceleration
  // ni freinage.
  afficherR(r);
  cout << "Fin de test1Bis\n";
}

/* meme principe initial que test1Bis mais à l'ajout des voitures on laisse un
 * ecart de trois cellules entre les deux voitures. Il n'y a plus de freinage de
 * securite de A et on a 3 accelerations successives.
 * Pour epicer la simulation, après un certain nombre de pas de simulation
 * on ajoute une nouvelle voiture qui va changer la donne
 */
void test1Ter() {
  Route r;
  cout << "\n\nLancement de test1Ter\n";
  initialiser(r, 40, 3);
  afficherR(r);
  ajouter(r, 7); ajouter(r, 1);
  cout << "Ajout des voitures \n";
  afficherR(r);
  simuler(r, 11);
  afficherR(r);
  // une voiture s'incruste devant A.
  cout << "On ajoute la voiture C en derniere position" << endl;
  ajouter(r, 39);
  // A a ralenti, B va devoir ralentir, puis A et B vont progressivement
  // reacceler tandis que C poursuit sa route
  for(int i=0; i < 10; i += 1) {
    afficherR(r);
    // fragment de code a decommenter quand vous aurez ecrit la
    // fonction saVitesse()
    
    cout << "Vitesses: A = " << saVitesse(r, 'A')
	 << " B = : " << saVitesse(r, 'B')
	 << " C = " << saVitesse(r, 'C')
	 << endl << endl;
    
    simuler(r, 1);
  }
  afficherR(r);
  cout << "\n\nAjout de D juste devant C" << endl;
  ajouter(r, 27);
  afficherR(r);
  for(int i = 0; i < 10; i++) { simuler(r, 1); afficherR(r); }
  cout << "Fin de test1Ter\n";
}


int main(int argc, char *argv[]) {
  test1();
  test1Bis();
  test1Ter();

  return 0;
}

